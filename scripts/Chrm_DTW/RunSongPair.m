%% Script to run a song PAIR through the LABROSA Beat-synched-chroma - DTW cover song detection package% Run this with:% octave RunSongPair.m ../covers80_32k/aiff/tina_turner+Tina_Live_In_Europe_CD_2_+05-River_Deep_Mountain_High.aiff ../covers80_32k/aiff/celine_dion+Falling_Into_You+12-River_Deep_Mountain_High.aiff% or% octave RunSongPair.m ../covers80_32k/aiff/tina_turner+Tina_Live_In_Europe_CD_2_+05-River_Deep_Mountain_High.aiff ../covers80_32k/aiff/run_dmc+Raising_Hell+04-Walk_This_Way.aiff% or (in cloud)% octave RunSongPair.m csd_web_app/songs/static/MP3/ub40+Labour_of_Love+06-Red_Red_Wine.mp3 csd_web_app/songs/static/MP3/neil_diamond+Hot_August_Night_Disc_1+10-Red_Red_Wine.mp3pkg load signal;% Defaultssrcext = ''; dstext = '.chrm'; skip = 0; fctr = 400;     % downweight fundamentals below herefsd = 1.0; ctype = 1; maxlag = 800;         % max lag is 800 windowsis_linux = length(strfind(computer(), 'linux'));if is_linux  audio_dir = '/Content/Code/SndsLike/CoSoDe/covers80_32k/aiff';else  audio_dir = '';endchgrm_dir = 'ChrmGrms0/';f_list_fil = 'list_stp.txt';arg_list = argv();ifname = arg_list{1};i2name = arg_list{2};do_parallel = false;      % run in many threads (Linux-only)take1 = false;            % take 1 minute from the middle of the songpre_proc = false;         % do the pre-processing power/norm/FFT before the save%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ANALYSIS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%nowd = datestr(rem(now, 1), 'HH:MM:SS');disp('')disp(['    -------- Starting analysis at ', nowd, ' --------']);disp('')% Calculate and store the beat-synchronous chroma features for the input files[chgrm, fnam] = do_analysis(ifname, audio_dir, srcext, chgrm_dir, dstext, skip, fctr, fsd, ctype, take1, pre_proc);tlist{1} = fnam;[chgr2, fna2] = do_analysis(i2name, audio_dir, srcext, chgrm_dir, dstext, skip, fctr, fsd, ctype, take1, pre_proc);xlist{1} = fna2;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% MATCHING %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%nowd = datestr(rem(now, 1), 'HH:MM:SS');disp('')disp(['    -------- Starting matching at ', nowd, ' --------']);disp('')%[R, S, T, C] = do_match(chgrm, tlist, take1, pre_proc);    %%%%%%%%%%%%%%%% do_match%[R, S, T, C] = coverTestLists(tlist, xlist, 0.5, 2, 0, take1, pre_proc);  r = chromxcorr(chgrm, chgr2, maxlag);              % find best alignmentsmmr = max(max(r));bestchrom = find(max(r, [], 2) == mmr);                      % Look for rapid variation - do HPF along time of best chromfxc = filter([1 -1], [1 -.9], r(bestchrom, :) - mean(r(bestchrom, :)));                      % chop off first bit - onset transient for start-in-the-middlefxc(1 : 50) = min(fxc);R = max(fxc);refpt = maxlag;R = abs(R);             % abs valR = R .* R * 100000;    % square and scale result##disp('R')##disp(R);[path1, nam1, ext1] = fileparts(ifname);if length(strfind(nam1, '+')) == 0  ar1 = nam1;  ar12 = '';else  ar1 = strsplit(nam1, '+');%  disp(ar1);  ar11 = ar1(1){1};  ar12 = ar1(3){1};end[path2, nam2, ext2] = fileparts(i2name);if length(strfind(nam2, '+')) == 0  ar2 = nam2;  ar22 = '';else  ar2 = strsplit(nam2, '+');  ar21 = ar2(1){1};  ar22 = ar2(3){1};enddisp(['  ', ar11, ' : ', ar12, ' -- ', ar21, ' : ', ar22, ' = ', num2str(R)]);